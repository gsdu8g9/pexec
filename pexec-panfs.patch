--- pexec.pl.patch2	2011-09-09 16:18:44.000000000 -0600
+++ pexec.pl	2011-09-09 16:29:17.787612834 -0600
@@ -21,7 +21,29 @@
 
 use Fcntl qw(:DEFAULT :flock);
 
-use Pod::Usage;
+eval 'use Pod::Usage';
+if ($@) {				# Pod::Usage not found
+   *pod2usage = sub {
+      local($_) = shift;
+      my %opts = ();
+
+      if (scalar(@_)) {			# too many arguments; assume the user
+	 %opts = ($_, @_);		# forgot to pass a reference to it.
+      } elsif (ref $_) {		# user passed a ref to a hash
+	 %opts = %{$_} if (ref($_) eq 'HASH');
+      } elsif (/^[-+]?\d+$/) {		# user passed in the exit value to use
+	 $opts{'-exitval'} =  $_;
+      } else {				# user passed in a message to print
+	 $_ and $opts{'-message'} = $_;
+      }
+
+      print STDERR "$opts{'-message'}\n"
+	 if (exists($opts{'-message'}));
+      exec {'/usr/bin/pod2text'} '/usr/bin/pod2text', $0;
+      die "$prog: unable to exec '/usr/bin/pod2text': $!\n";
+   };
+}
+
 use Getopt::Long;
 &Getopt::Long::config(
    'require_order',			# don't mix non-options with options
@@ -135,7 +157,7 @@
 	 unless ($opt_ping_host =~ /\%host\%/);
 
       if ($opt_ping_host =~ 
-	 /^(.*):([^\/]+)\/(tcp|udp|icmp|syn)$/) {	# %host%:port/proto
+	 /^(.*):([^\/]+)\/(tcp|udp|icmp)$/) {		# %host%:port/proto
 	 $opt_ping_host = $1;
 	 $ping_port = $2;
 	 $ping_proto = $3;
@@ -150,7 +172,7 @@
 	    $ping_port = getservbyname($ping_port, 'tcp') ||
 	       pod2usage(qq|\n$prog: --ping-host: no such service: $ping_port\n|);
 	 }
-	 $ping_proto = 'syn';
+	 $ping_proto = 'tcp';
       } elsif ($opt_ping_host =~ /:/) {
 	 pod2usage("\n$prog: --ping-host: malformed: $opt_ping_host\n")
       }
@@ -174,14 +196,14 @@
    $opt_rcpy = 'rcp';
    @opt_rcpy_opts = @rcp_opts unless(@opt_rcpy_opts);
    $ping_port = getservbyname('shell', 'tcp') unless (defined($ping_port));
-   $ping_proto = 'syn' unless (defined($ping_proto));
+   $ping_proto = 'tcp' unless (defined($ping_proto));
 } elsif (defined($opt_scp)) {
    pod2usage(qq|\n$prog: option '--scp' cannot be used with option '--rsync'\n|)
       if (defined($opt_rsync));
    $opt_rcpy = 'scp';
    @opt_rcpy_opts = @scp_opts unless(@opt_rcpy_opts);
    $ping_port = getservbyname('ssh', 'tcp') unless (defined($ping_port));
-   $ping_proto = 'syn' unless (defined($ping_proto));
+   $ping_proto = 'tcp' unless (defined($ping_proto));
 } elsif (defined($opt_rsync)) {
    $opt_rcpy = 'rsync';
    @opt_rcpy_opts = @rsync_opts unless(@opt_rcpy_opts);
@@ -190,7 +212,7 @@
    $opt_rsync_rsh = 'ssh -qx' unless (defined($opt_rsync_rsh));
    push(@opt_rcpy_opts, '-e', $opt_rsync_rsh);
    $ping_port = getservbyname('rsync', 'tcp') unless (defined($ping_port));
-   $ping_proto = 'syn' unless (defined($ping_proto));
+   $ping_proto = 'tcp' unless (defined($ping_proto));
 }
 
 if (defined($opt_rcpy)) {
@@ -334,7 +356,7 @@
      );
    unshift (@ARGV,@RLP);
    $ping_port = getservbyname('shell', 'tcp') unless (defined($ping_port));
-   $ping_proto = 'syn' unless (defined($ping_proto));
+   $ping_proto = 'tcp' unless (defined($ping_proto));
 }
 
 if (defined($opt_ssh)) {
@@ -344,7 +366,7 @@
      );
    unshift (@ARGV,@RLP);
    $ping_port = getservbyname('ssh', 'tcp') unless (defined($ping_port));
-   $ping_proto = 'syn' unless (defined($ping_proto));
+   $ping_proto = 'tcp' unless (defined($ping_proto));
 }
 
 if (defined($opt_P)) {
@@ -376,6 +398,9 @@
       map { join('.', unpack('C4', $_)) }
 	 (gethostbyname($ThisMachine))[4]);
 }
+if (defined(my $ip = gethostbyname($ThisMachine))) {
+   $ThisMachine = join('.', unpack('C4', $ip));
+}
 
 foreach $skip (@MachineSkip) {
    @MachineList = grep(! /^\Q$skip\E$/,@MachineList);
@@ -523,14 +548,7 @@
 
 	       my $p = Net::Ping->new($ping_proto, $opt_ping_timeout);
 	       $p->{port_num} = $ping_port;
-	       if ($p->ping($ping_host)) {
-		  if ($ping_proto eq 'syn') {
-		     unless ($p->ack($ping_host)) {	# SYN ack failed
-			print STDOUT "noping\n";
-			exit EHOSTUNREACH;
-		     }
-		  }
-	       } else {					# ping failed
+	       unless ($p->ping($ping_host)) {
 		  print STDOUT "noping\n";
 		  exit EHOSTUNREACH;
 	       }
@@ -647,14 +665,7 @@
 
 	       my $p = Net::Ping->new($ping_proto, $opt_ping_timeout);
 	       $p->{port_num} = $ping_port;
-	       if ($p->ping($ping_host)) {
-		  if ($ping_proto eq 'syn') {
-		     unless ($p->ack($ping_host)) {	# SYN ack failed
-			print STDOUT "noping\n";
-			exit EHOSTUNREACH;
-		     }
-		  }
-	       } else {					# ping failed
+	       unless ($p->ping($ping_host)) {
 		  print STDOUT "noping\n";
 		  exit EHOSTUNREACH;
 	       }
@@ -885,6 +896,19 @@
 		  }
 	       }
 	    }
+	 } elsif ($name =~ /^(allblades|director(blades)?|storage(blades)?|rep(set)?|shelfmaster)$/) {
+	    (my $type = $1) =~ s/allblades//;
+	    -x '/pan/bin/pancli' || (push(@Machines,$name) , next M);
+	    open(PANCLI, "/pan/bin/pancli -c iplist $type |") ||
+	       (push(@Machines,$name) , next M);
+	    my $iplist = <PANCLI>;
+	    close PANCLI || (push(@Machines,$name) , next M);
+	    chomp $iplist;
+	    foreach my $ip (split(/\s+/, $iplist)) {
+	       if ($ip =~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/) {
+		  push(@Machines, $ip);
+	       }
+	    }
 	 } else {					# a single host
 	    push(@Machines,$name) unless ($name =~ /^$/);
 	 }
@@ -1076,6 +1100,8 @@
 
 Include I<host> in the machine list.  Valid names are: hosts, netgroups,
 ranges, or a path to files containing these entities (newline separated).
+You may also use any valid B<pancli iplist> I<option> as an argument, as well
+as I<"allblades"> to produce all IP addresses (see B<pancli -c help iplist>).
 Each I<host> specification may be inter-mixed however always comma
 separated.  Netgroup names are invoked by using the "@" symbol, which acts
 as an intersection operator.  A single netgroup can be designated with a
@@ -1128,7 +1154,7 @@
 intelligent effort is made to set appropriate default port/protocol values
 to provide the best-possible assurance I<cmd> will succeed to the host
 should the ping be successful.  For example, the B<pexec> options involving
-ssh(1)/scp(1) will set default ping attributes to I<22/syn>; likewise for
+ssh(1)/scp(1) will set default ping attributes to I<22/tcp>; likewise for
 rsh(1)/rcp(1) and rsync(1).  These may be overridden by the B<--ping-host>
 option below.  In the event B<pexec> is unable to decipher which service
 you're intending, default ping attributes are set to the standard:
@@ -1145,10 +1171,10 @@
 name, in which case it will be converted to a port number.  Omitting the
 I<port> lends its value to the default process outlined in the B<--ping>
 description above.  The I<proto> specification is also optional but must be
-one of "I<tcp>", "I<udp>", "I<icmp>" or "I<syn>".  Be forewarned that an
+one of "I<tcp>", "I<udp>" or "I<icmp>".  Be forewarned that an
 I<icmp> ping (to any port) requires root privilege.  If the I<proto>
 argument is not specified and the I<port> is defined, default behavior is
-to use "I<syn>" for the protocol.  If B<--ping> is selected yet option
+to use "I<tcp>" for the protocol.  If B<--ping> is selected yet option
 B<--ping-host> is omitted altogether, I<format> defaults to "I<%host%>"
 leaving the I<port>/I<proto> values to the default process outlined in the
 B<--ping> description above.
